import tempfile
import os
import datajoint as dj
import numpy as np
from nnfabrik.templates.trained_model import TrainedModelBase
from nnfabrik.templates.trained_model_chkpts import TrainedModelChkptBase
from nnfabrik.utility.dj_helpers import make_hash, clone_conn, CustomSchema


class TransferStepBase(TrainedModelChkptBase):
    class TransferStorage(dj.Part):
        storage = "minio"

        @property
        def definition(self):
            definition = """
            # Contains the data generated by the transfer step, stored externally.
            -> master
            ---
            transfer_train_data:            attach@{storage}
            transfer_test_data:            attach@{storage}
            """.format(
                storage=self.storage
            )
            return definition

    def make(self, key):
        """
        Given key specifying configuration for dataloaders, model and trainer,
        trains the model and saves the trained model.
        """
        # lookup the fabrikant corresponding to the current DJ user
        fabrikant_name = self.user_table.get_current_user()
        seed = (self.seed_table & key).fetch1("seed")

        # load everything
        dataloaders, model, trainer = self.load_model(
            key, include_trainer=True, include_state_dict=False, seed=seed
        )

        # define callback with pinging
        def call_back(**kwargs):
            self.connection.ping()
            self.call_back(**kwargs)

        # transfer step
        train, test = trainer(
            model=model, dataloaders=dataloaders, seed=seed, uid=key, cb=call_back
        )

        # save resulting model_state into a temporary file to be attached
        with tempfile.TemporaryDirectory() as temp_dir:
            train_filename = make_hash(key) + "_train.npy"
            test_filename = make_hash(key) + "_test.npy"
            train_path = os.path.join(temp_dir, train_filename)
            test_path = os.path.join(temp_dir, test_filename)
            np.save(train_path, train)
            np.save(test_path, test)

            key["score"] = 0.0
            key["output"] = {}
            key["fabrikant_name"] = fabrikant_name
            comments = []
            comments.append((self.trainer_table & key).fetch1("trainer_comment"))
            comments.append((self.model_table & key).fetch1("model_comment"))
            comments.append((self.dataset_table & key).fetch1("dataset_comment"))
            key["comment"] = self.comment_delimitter.join(comments)
            self.insert1(key)

            key["transfer_train_data"] = train_path
            key["transfer_test_data"] = test_path
            self.TransferStorage.insert1(key, ignore_extra_fields=True)
